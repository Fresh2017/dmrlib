MAKEFLAGS += -rR --include-dir=$(CURDIR)

# Avoid funny character set dependencies
unexport LC_ALL
LC_COLLATE=C
LC_NUMERIC=C
export LC_COLLATE LC_NUMERIC

# Make variables (CC, etc...)
AS			= $(CROSS_COMPILE)as
LD			= $(CROSS_COMPILE)ld
CC			= $(CROSS_COMPILE)gcc
CPP			= $(CC) -E
AR			= $(CROSS_COMPILE)ar
NM			= $(CROSS_COMPILE)nm
STRIP		= $(CROSS_COMPILE)strip
OBJCOPY		= $(CROSS_COMPILE)objcopy
OBJDUMP		= $(CROSS_COMPILE)objdump
AWK			= awk
INSTALL 	= install
PERL 		= perl

ifeq ($(V),)
Q=
endif
ifeq ($(V),0)
Q=@echo "  $1	$@"; $($1)
endif
ifeq ("$(origin V)", "command line")
  BUILD_VERBOSE = $(V)
endif
ifndef BUILD_VERBOSE
  BUILD_VERBOSE = 0
endif
ifeq ("$(origin DEBUG)", "command line")
  BUILD_DEBUG = $(DEBUG)
endif
ifndef BUILD_DEBUG
  BUILD_DEBUG = 0
endif

ifeq ($(BUILD_VERBOSE),1)
  quiet =
  Q =
  QCC = $(CC)
  QLD = $(CC)
  QMM = $(CC)
  QRM = $(RM)
  QINSTALL = $(INSTALL)
else
  quiet=quiet_
  Q = @
  QCC = @printf "[\033[1;33m  CC  \033[0m] %s\n" "$@"; $(CC)
  QLD = @printf "[\033[1;32m LINK \033[0m] %s\n" "$@"; $(CC)
  QMM = @printf "[\033[1;34m DEPS \033[0m] %s\n" "$<"; $(CC)
  QRM = @printf "[\033[1;31m  RM  \033[0m] %s\n" "$@"; $(RM)
  QINSTALL = @printf "[\033[1;32m COPY \033[0m] %s\n" "$^"; $(INSTALL)
endif

UNAME := $(shell uname -s)

ifeq ($(UNAME),Darwin)
# Facilitate Homebrew (http://brew.sh/)
CFLAGS   += -I/usr/local/include
LDFLAGS  += -L/usr/local/lib
SHLIBEXT  = .dylib
endif
ifeq ($(UNAME),Linux)
SHLIBEXT  = .so
endif

ifeq ($(V),1)
MKDIR_P = mkdir -p -v
RM 		= rm -rv
else
MKDIR_P	= mkdir -p
RM 		= rm -r
endif
ifeq ($(OS),Windows)
setlocal enableextensions
MKDIR_P = md
endif

.PHONY: all

FLAGS   ?=
PREFIX  ?= {{ args.prefix }}
BINDIR  ?= $(PREFIX)/bin
LIBDIR  ?= $(PREFIX)/lib
BUILD   ?= {{ args.builddir }}

CFLAGS  ?= {{ env.CFLAGS }}
CFLAGS  += -Wall -Wextra -ffast-math
CFLAGS  += -D_GNU_SOURCE -D_REENTRANT
CFLAGS  += -Iinclude -fPIC
{% if args.with_debug -%}
CFLAGS  += -g
{% else -%}
CFLAGS  += -O2
{% endif -%}
LDFLAGS ?= {{ env.LDFLAGS }}

{% if args.with_mbelib -%}
MBELIB_SOURCES       = $(wildcard src/mbelib/*.c)
MBELIB_OBJECTS       = $(patsubst %.c,%.o,$(MBELIB_SOURCES))
MBELIB_CFLAGS        = $(CFLAGS)
MBELIB_LDFLAGS 		 = $(LDFLAGS) -shared
MBELIB_LIBS 		 =
{%- endif %}

DMRLIB_SOURCES       = $(wildcard src/dmr/**/*.c src/dmr/*.c)
DMRLIB_OBJECTS       = $(patsubst %.c,%.o,$(DMRLIB_SOURCES))
DMRLIB_CFLAGS        = $(CFLAGS)
DMRLIB_LDFLAGS       = $(LDFLAGS) -shared -Lsrc/mbelib
DMRLIB_LIBS 		 = {% if args.with_mbelib %} -lmbe{% endif %} -lpthread -ltalloc
ifeq ($(UNAME),Linux)
DMRLIB_LIBS         += -lrt
endif

DMRDUMP_SOURCES      = $(wildcard src/cmd/dmrdump/*.c)
DMRDUMP_OBJECTS      = $(patsubst %.c,%.o,$(DMRDUMP_SOURCES))
DMRDUMP_CFLAGS       = $(CFLAGS) -D_BSD_SOURCE
DMRDUMP_LDFLAGS      = $(LDFLAGS) -Lsrc/dmr
DMRDUMP_LIBS 		 = -lpcap -lpthread -ltalloc -ldmr

NOISEBRIDGE_SOURCES  = $(wildcard src/cmd/noisebridge/*.c)
NOISEBRIDGE_OBJECTS  = $(patsubst %.c,%.o,$(NOISEBRIDGE_SOURCES))
NOISEBRIDGE_CFLAGS   = $(CFLAGS)
NOISEBRIDGE_LDFLAGS  = $(LDFLAGS) -Lsrc/dmr
NOISEBRIDGE_LIBS     = -ldmr -lpcap -lpthread -ltalloc

TEST_SOURCES 		 = $(wildcard test/test_*.c)
TEST_PROGRAMS 		 = $(patsubst %.c,%.test,$(TEST_SOURCES))
TEST_CFLAGS 		 = $(CFLAGS)
TEST_LDFLAGS  		 = $(LDFLAGS) -Lsrc/dmr
TEST_LIBS     		 = -ldmr -lpthread -ltalloc

UNAME := $(shell uname -s)

ifeq ($(UNAME),Linux)
NOISEBRIDGE_LIBS    += -lbsd
endif

all: build

debug: build-debug

build: {% if args.with_mbelib %} build-mbelib{% endif %} build-dmrlib build-cmd

build-debug: FLAGS += DEBUG=1
build-debug: build

install-dir:
	$(INSTALL) -m0755 -d $(BINDIR)
	$(INSTALL) -m0755 -d $(LIBDIR)

install: install-dir{% if args.with_mbelib %} install-mbelib{% endif %} install-dmrlib install-cmd

clean:{% if args.with_mbelib %} clean-mbelib{% endif %} clean-dmrlib clean-cmd clean-test

test: test-all

{% if args.with_mbelib -%}

#
# lib/mbelib
#

src/mbelib/libmbe$(SHLIBEXT): $(MBELIB_OBJECTS)
	$(QLD) $(MBELIB_CFLAGS) -shared -o $@ -fPIC $^ $(MBELIB_LIBS)

build-mbelib: src/mbelib/libmbe$(SHLIBEXT)

src/mbelib/%.o: src/mbelib/%.c
src/mbelib/%.o: src/mbelib/%.c src/mbelib/%.d
	$(QCC) -c $(MBELIB_CFLAGS) -o $@ $<

src/mbelib/%.d: src/mbelib/%.c
	$(QMM) -MM $(DEPFLAGS) $(MBELIB_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

clean-mbelib:
	$(QRM) src/mbelib/*.{d,o,so} || true

{%- endif %}

#
# lib/dmrlib
#

build-dmrlib: src/dmr/libdmr$(SHLIBEXT)

src/dmr/libdmr$(SHLIBEXT): $(DMRLIB_OBJECTS)
	$(QLD) $(DMRLIB_LDFLAGS) -shared -o $@ -fPIC $^ $(DMRLIB_LIBS)

src/dmr/%.o: src/dmr/%.c
src/dmr/%.o: src/dmr/%.c src/dmr/%.d
	$(QCC) -c $(DMRLIB_CFLAGS) -o $@ $<

src/dmr/%.d: src/dmr/%.c
	$(QMM) -MM $(DEPFLAGS) $(DMRLIB_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

-include $(patsubst %.o,%.d,$(DMRLIB_OBJECTS))

install-dmrlib: src/dmr/libdmr$(SHLIBEXT)
	$(QINSTALL) -m0644 src/dmr/libdmr$(SHLIBEXT) $(LIBDIR)/libdmr$(SHLIBEXT)

clean-dmrlib:
	$(QRM) src/dmr/*.{d,o,so} src/dmr/*/*.{d,o} || true

#
# bin/*
#

build-cmd: build-dmrlib build-dmrdump build-noisebridge

install-cmd: install-dmrdump install-noisebridge

clean-cmd: clean-dmrdump clean-noisebridge

#
# bin/dmrdump
#

build-dmrdump: src/cmd/dmrdump/dmrdump

src/cmd/dmrdump/dmrdump: $(DMRDUMP_OBJECTS)
	$(QLD) $(DMRDUMP_LDFLAGS) -o $@ $^ $(DMRDUMP_LIBS)

src/cmd/dmrdump/%.o: src/cmd/dmrdump/%.c
src/cmd/dmrdump/%.o: src/cmd/dmrdump/%.c src/cmd/dmrdump/%.d
	$(QCC) -c $(DMRDUMP_CFLAGS) -o $@ $<

src/cmd/dmrdump/%.d: src/cmd/dmrdump/%.c
	$(QMM) -MM $(DEPFLAGS) $(DMRLIB_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

-include $(patsubst %.o,%.d,$(DMRDUMP_OBJECTS))

install-dmrdump: src/cmd/dmrdump/dmrdump
	$(QINSTALL) -m0755 $< $(BINDIR)/dmrdump

clean-dmrdump:
	$(QRM) src/cmd/dmrdump/*.{d,o} src/cmd/dmrdump/dmrdump || true

#
# bin/noisebridge
#

build-noisebridge: src/cmd/noisebridge/noisebridge

src/cmd/noisebridge/noisebridge: $(NOISEBRIDGE_OBJECTS)
	$(QLD) $(NOISEBRIDGE_LDFLAGS) -o $@ $^ $(NOISEBRIDGE_LIBS)

src/cmd/noisebridge/%.o: src/cmd/noisebridge/%.c
src/cmd/noisebridge/%.o: src/cmd/noisebridge/%.c src/cmd/noisebridge/%.d
	$(QCC) -c $(NOISEBRIDGE_CFLAGS) -o $@ $<

src/cmd/noisebridge/%.d: src/cmd/noisebridge/%.c
	$(QMM) -MM $(DEPFLAGS) $(NOISEBRIDGE_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

-include $(patsubst %.o,%.d,$(NOISEBRIDGE_OBJECTS))

install-noisebridge: src/cmd/noisebridge/noisebridge
	$(QINSTALL) -m0755 $< $(BINDIR)/noisebridge

clean-noisebridge:
	$(QRM) src/cmd/noisebridge/*.{d,o} src/cmd/noisebridge/noisebridge || true

#
# tests
#

test-all: .force src/dmr/libdmr$(SHLIBEXT) $(TEST_PROGRAMS) test-run

test/%.test: test/%.o
	$(QLD) $(TEST_LDFLAGS) -o $@ $^ $(TEST_LIBS)

test/%.o: test/%.c
test/%.o: test/%.c test/%.d
	$(QCC) -c $(TEST_CFLAGS) -o $@ $<

test/%.d: test/%.c
	$(QMM) -MM $(DEPFLAGS) $(TEST_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

test-run: .force $(TEST_PROGRAMS)
	@for test in $(TEST_PROGRAMS); do printf "[\033[1;37m TEST \033[0m] %s\n" "$$test"; $$test; done

clean-test:
	$(QRM) $(TEST_PROGRAMS) || true

.force:
