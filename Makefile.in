MAKEFLAGS += -rR --include-dir=$(CURDIR)

# Avoid funny character set dependencies
unexport LC_ALL
LC_COLLATE=C
LC_NUMERIC=C
export LC_COLLATE LC_NUMERIC

# Make variables (CC, etc...)
CROSS_COMPILE	= {{ CROSS_COMPILE }}
AS		= $(CROSS_COMPILE)as
LD		= $(CROSS_COMPILE)ld
CC		= $(CROSS_COMPILE)gcc
CP		= cp
CPP		= $(CC) -E
AR		= $(CROSS_COMPILE)ar
NM		= $(CROSS_COMPILE)nm
STRIP		= $(CROSS_COMPILE)strip
OBJCOPY		= $(CROSS_COMPILE)objcopy
OBJDUMP		= $(CROSS_COMPILE)objdump
AWK		= awk
INSTALL		= install
PERL 		= perl
BINEXT		= {{ BINEXT }}
ARLIBPRE	= {{ ARLIBPRE }}
ARLIBEXT	= {{ ARLIBEXT }}
SHLIBPRE	= {{ SHLIBPRE }}
SHLIBEXT	= {{ SHLIBEXT }}

# Verbosity control
ifeq ($(V),)
Q=
endif
ifeq ($(V),0)
Q=@echo "  $1	$@"; $($1)
endif
ifeq ("$(origin V)", "command line")
  BUILD_VERBOSE = $(V)
endif
ifndef BUILD_VERBOSE
  BUILD_VERBOSE = 0
endif
ifeq ("$(origin DEBUG)", "command line")
  BUILD_DEBUG = $(DEBUG)
endif
ifndef BUILD_DEBUG
  BUILD_DEBUG = 0
endif

ifeq ($(BUILD_VERBOSE),1)
  quiet =
  Q =
  QAR = $(AR)
  QCC = $(CC)
  QCP = $(CP)
  QLD = $(CC)
  QMM = $(CC)
  QINSTALL = $(INSTALL)
else
  quiet=quiet_
  Q = @
  QAR = @printf "[\033[1;32mARCHIV\033[0m] %s\n" "$@"; $(AR)
  QCC = @printf "[\033[1;33m  CC  \033[0m] %s\n" "$@"; $(CC)
  QCP = @printf "[\033[1;32m COPY \033[0m] %s\n" "$@"; $(CP)
  QLD = @printf "[\033[1;32m LINK \033[0m] %s\n" "$@"; $(CC)
  QMM = @printf "[\033[1;34m DEPS \033[0m] %s\n" "$<"; $(CC)
  QINSTALL = @printf "[\033[1;32m COPY \033[0m] %s\n" "$^"; $(INSTALL)
endif

UNAME := $(shell uname -s)

ifeq ($(V),1)
MKDIR_P = mkdir -p -v
RM 		= rm -rv
else
MKDIR_P	= mkdir -p
RM 		= rm -r
endif

ifeq ($(OS),Windows)
setlocal enableextensions
MKDIR_P = md
endif

.PHONY: all

PREFIX     ?= {{ PREFIX }}
BINDIR     ?= $(DEST)$(PREFIX)/bin
LIBDIR     ?= $(DEST)$(PREFIX)/lib
INCLUDEDIR ?= $(DEST)$(PREFIX)/include

CFLAGS  ?= {{ CFLAGS|join(" ") }}
CFLAGS  += {% for name in DEFINES %}-D{{ name }} {% endfor %}
CFLAGS  += {% for path in INCLUDES %}-I{{ path }} {% endfor %}
{% if not have('mingw') -%}
CFLAGS  += -fPIC
{% endif -%}
{% if with('debug') -%}
CFLAGS  += -g
{% else -%}
CFLAGS  += -O2
{% endif -%}
LDFLAGS ?= {{ LDFLAGS|join(" ") }}
LDFLAGS += -L. {% for path in LIBPATH %}-L{{ path }} {% endfor %}

COMMON_SOURCES 		 = $(wildcard common/**/*.c common/*.c common/*/{{ env.PLATFORM }}.c)
COMMON_OBJECTS 		 = $(patsubst %.c,%.o,$(COMMON_SOURCES))
COMMON_DEPS 		 = $(patsubst %.c,%.d,$(COMMON_SOURCES))
COMMON_CFLAGS 		 = $(CFLAGS)
COMMON_ARCHIVE 		 = $(ARLIBPRE)common$(ARLIBEXT)
COMMON_LIBS 		 = -ltalloc
{% if have('mingw') %}
COMMON_LIBS 		+= -lhid -lsetupapi -lws2_32
{% endif %}
ifeq ($(UNAME),Darwin)
COMMON_LIBS 		+= -framework IOKit -framework CoreFoundation
endif

{% if with('mbelib') -%}
MBELIB_SOURCES       	= $(wildcard src/mbelib/*.c)
MBELIB_OBJECTS       	= $(patsubst %.c,%.o,$(MBELIB_SOURCES))
MBELIB_DEPS          	= $(patsubst %.c,%.d,$(MBELIB_SOURCES))
MBELIB_TARGET 		= $(SHLIBPRE)mbe$(SHLIBEXT)
MBELIB_CFLAGS        	= $(CFLAGS)
MBELIB_LDFLAGS 		= $(LDFLAGS) -shared
MBELIB_LIBS 		=
{%- endif %}

DMRLIB_SOURCES       	= $(wildcard src/dmr/**/*.c src/dmr/*.c)
DMRLIB_OBJECTS       	= $(patsubst %.c,%.o,$(DMRLIB_SOURCES))
DMRLIB_DEPS          	= $(patsubst %.c,%.d,$(DMRLIB_SOURCES))
DMRLIB_TARGET 		= $(SHLIBPRE)dmr$(SHLIBEXT)
DMRLIB_CFLAGS        	= $(CFLAGS)
DMRLIB_LDFLAGS       	= $(LDFLAGS) -shared -Lsrc/mbelib
DMRLIB_LIBS 		+= $(COMMON_ARCHIVE) $(COMMON_LIBS)
DMRLIB_LIBS 		+= -ltalloc {% if with('mbelib') %}-lmbe{% endif %} {{ lib('pthread', 1) }} {{ lib('rt', 1) }}

DMRDUMP_SOURCES      	= $(wildcard src/cmd/dmrdump/*.c)
DMRDUMP_OBJECTS      	= $(patsubst %.c,%.o,$(DMRDUMP_SOURCES))
DMRDUMP_DEPS         	= $(patsubst %.c,%.d,$(DMRDUMP_SOURCES))
DMRDUMP_TARGET 	     	= dmrdump$(BINEXT)
DMRDUMP_CFLAGS       	= $(CFLAGS) -D_DEFAULT_SOURCE
DMRDUMP_LDFLAGS      	= $(LDFLAGS) -Lsrc/dmr
DMRDUMP_LIBS 		= -ltalloc -ldmr {{ lib('pthread', 1) }} {{ lib('ws2_32', 1) }}
{% if have('libwpcap') %}
DMRDUMP_LIBS 	    	+= -lwpcap
{% elif have('pcap-config') -%}
DMRDUMP_LIBS        	+= $(shell pcap-config --libs)
{% else %}
DMRDUMP_LIBS 		+= {{ lib('pcap') }}
{% endif %}

NOISEBRIDGE_SOURCES  	= $(wildcard src/cmd/noisebridge/*.c)
NOISEBRIDGE_OBJECTS  	= $(patsubst %.c,%.o,$(NOISEBRIDGE_SOURCES))
NOISEBRIDGE_DEPS     	= $(patsubst %.c,%.d,$(NOISEBRIDGE_SOURCES))
NOISEBRIDGE_TARGET   	= noisebridge$(BINEXT)
NOISEBRIDGE_CFLAGS   	= $(CFLAGS)
NOISEBRIDGE_LDFLAGS  	= $(LDFLAGS)
NOISEBRIDGE_LIBS     	= -ldmr -ltalloc
{% set lua = "" %}
{% for opt in ('lua5.3', 'lua5.2', 'lua') -%}
	{%- if not lua and have('pkg-config ' + opt) -%}
		{%- set lua = opt -%}
NOISEBRIDGE_CFLAGS  	+= $(shell pkg-config --cflags {{ opt }})
NOISEBRIDGE_LIBS    	+= $(shell pkg-config --libs {{ opt }})
	{%- endif -%}
{% endfor %}
{% for opt in ('lua5.3', 'lua53', 'lua5.2', 'lua52', 'lua') %}
	{%- if not lua and have('lib' + opt) -%}
		{%- set lua = opt -%}
NOISEBRIDGE_LIBS    	+= -l{{ opt }}
	{%- endif -%}
{% endfor %}
{% if with('mbelib') %}
NOISEBRIDGE_LIBS 	+= -lportaudio
{% endif %}
NOISEBRIDGE_LIBS		+= $(COMMON_ARCHIVE) $(COMMON_LIBS)
NOISEBRIDGE_LIBS    	+= {{ lib('pthread', 1) }} {{ lib('bsd', 1) }} {{ lib('m', 1) }} {{ lib('rt', 1) }} {{ lib('dl', 1) }} {{ lib('ws2_32', 1) }} {{ lib('magic', 1) }}

SERIALDUMP_SOURCES   	= $(wildcard src/cmd/serialdump/*.c)
SERIALDUMP_OBJECTS   	= $(patsubst %.c,%.o,$(SERIALDUMP_SOURCES))
SERIALDUMP_DEPS 	= $(patsubst %.c,%.d,$(SERIALDUMP_SOURCES))
SERIALDUMP_TARGET    	= serialdump$(BINEXT)
SERIALDUMP_CFLAGS 	= $(CFLAGS)
SERIALDUMP_LDFLAGS 	= $(LDFLAGS)
SERIALDUMP_LIBS      	= $(COMMON_ARCHIVE) $(COMMON_LIBS)

TEST_SOURCES 		= $(wildcard test/test_*.c)
TEST_OBJECTS 		= $(patsubst %.c,%.o,$(TEST_SOURCES))
TEST_DEPS 		= $(patsubst %.c,%.d,$(TEST_SOURCES))
TEST_PROGRAMS 		= $(patsubst %.c,%.test,$(TEST_SOURCES))
TEST_CFLAGS 		= $(CFLAGS)
TEST_LDFLAGS  		= $(LDFLAGS) -Lsrc/dmr
TEST_LIBS     		= -ldmr {{ lib('pthread', 1) }} -ltalloc

UNAME := $(shell uname -s)

all: build

debug: build-debug

build: build-common {% if with('mbelib') %} build-mbelib{% endif %} build-dmrlib build-cmd

build-debug: FLAGS += DEBUG=1
build-debug: build

install-dir:
	$(INSTALL) -m0755 -d $(BINDIR)
	$(INSTALL) -m0755 -d $(LIBDIR)

install: install-dir {% if with('mbelib') %}install-mbelib {% endif %}install-dmrlib install-cmd

test: test-all

clean: clean-common {% if with('mbelib') %}clean-mbelib {% endif %}clean-dmrlib clean-cmd clean-test

#
# common/
#

$(COMMON_ARCHIVE): $(COMMON_OBJECTS)
	$(QAR) -rcs $@ $^

build-common: $(COMMON_ARCHIVE)

common/%.o: common/%.c
common/%.o: common/%.c common/%.d
	$(QCC) -c $(COMMON_CFLAGS) -o $@ $<

common/%.d: common/%.c
	$(QMM) -MM $(DEPFLAGS) $(COMMON_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),clean-common)
-include $(patsubst %.o,%.d,$(COMMON_OBJECTS))
endif
endif

clean-common:
	$(Q)for file in $(COMMON_ARCHIVE) $(COMMON_OBJECTS) $(COMMON_DEPS); do if [ -f "$$file" ]; then $(RM) "$$file"; fi; done

{% if with('mbelib') -%}

#
# lib/mbelib
#

$(MBELIB_TARGET): $(MBELIB_OBJECTS)
	$(QLD) $(MBELIB_CFLAGS) -shared -o $@ -fPIC $^ $(MBELIB_LIBS)

build-mbelib: $(COMMON_ARCHIVE) $(MBELIB_TARGET)

src/mbelib/%.o: src/mbelib/%.c
src/mbelib/%.o: src/mbelib/%.c src/mbelib/%.d
	$(QCC) -c $(MBELIB_CFLAGS) -o $@ $<

src/mbelib/%.d: src/mbelib/%.c
	$(QMM) -MM $(DEPFLAGS) $(MBELIB_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),clean-mbelib)
-include $(patsubst %.o,%.d,$(MBELIB_OBJECTS))
endif
endif

install-mbelib: $(MBELIB_TARGET)
	$(QINSTALL) -m0644 $(MBELIB_TARGET) $(LIBDIR)/$(MBELIB_TARGET)

clean-mbelib:
	$(Q)for file in $(MBELIB_TARGET) $(MBELIB_OBJECTS) $(MBELIB_DEPS); do if [ -f "$$file" ]; then $(RM) "$$file"; fi; done

{%- endif %}

#
# lib/dmrlib
#

build-dmrlib: $(COMMON_ARCHIVE) $(DMRLIB_TARGET)

$(DMRLIB_TARGET): $(DMRLIB_OBJECTS)
	$(QLD) $(DMRLIB_LDFLAGS) -shared -o $@ -fPIC $^ $(DMRLIB_LIBS)

src/dmr/%.o: src/dmr/%.c
src/dmr/%.o: src/dmr/%.c src/dmr/%.d
	$(QCC) -c $(DMRLIB_CFLAGS) -o $@ $<

src/dmr/%.d: src/dmr/%.c
	$(QMM) -MM $(DEPFLAGS) $(DMRLIB_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),clean-dmrlib)
-include $(patsubst %.o,%.d,$(DMRLIB_OBJECTS))
endif
endif

install-dmrlib: $(DMRLIB_TARGET)
	$(QINSTALL) -m0755 -d $(LIBDIR)
	$(QINSTALL) -m0644 $(DMRLIB_TARGET) $(LIBDIR)/$(DMRLIB_TARGET)
	$(QINSTALL) -m0755 -d $(LIBDIR)/pkgconfig
	$(QINSTALL) -m0644 dmrlib.pc $(LIBDIR)/pkgconfig/dmrlib.pc
	$(QINSTALL) -m0755 -d $(INCLUDEDIR)
	$(QCP) -R include/dmr $(INCLUDEDIR)

clean-dmrlib:
	$(Q)for file in $(DMRLIB_TARGET) $(DMRLIB_OBJECTS) $(DMRLIB_DEPS); do if [ -f "$$file" ]; then $(RM) "$$file"; fi; done

#
# bin/*
#

build-cmd: build-dmrlib build-dmrdump build-serialdump build-noisebridge

install-cmd: install-dmrdump install-serialdump install-noisebridge

clean-cmd: clean-dmrdump clean-serialdump clean-noisebridge

#
# bin/dmrdump
#

build-dmrdump: $(COMMON_ARCHIVE) $(DMRDUMP_TARGET)

$(DMRDUMP_TARGET): $(DMRDUMP_OBJECTS)
	$(QLD) $(DMRDUMP_LDFLAGS) -o $@ $^ $(DMRDUMP_LIBS)

src/cmd/dmrdump/%.o: src/cmd/dmrdump/%.c
src/cmd/dmrdump/%.o: src/cmd/dmrdump/%.c src/cmd/dmrdump/%.d
	$(QCC) -c $(DMRDUMP_CFLAGS) -o $@ $<

src/cmd/dmrdump/%.d: src/cmd/dmrdump/%.c
	$(QMM) -MM $(DEPFLAGS) $(DMRLIB_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),clean-dmrdump)
-include $(patsubst %.o,%.d,$(DMRDUMP_OBJECTS))
endif
endif

install-dmrdump: $(DMRDUMP_TARGET)
	$(QINSTALL) -m0755 $< $(BINDIR)/$(DMRDUMP_TARGET)

clean-dmrdump:
	$(Q)for file in $(DMRDUMP_TARGET) $(DMRDUMP_OBJECTS) $(DMRDUMP_DEPS); do if [ -f "$$file" ]; then $(RM) "$$file"; fi; done


#
# noisebridge
#

build-noisebridge: $(COMMON_ARCHIVE) $(NOISEBRIDGE_TARGET)

$(NOISEBRIDGE_TARGET): $(NOISEBRIDGE_OBJECTS)
	$(QLD) $(NOISEBRIDGE_LDFLAGS) -o $@ $^ $(NOISEBRIDGE_LIBS)

src/cmd/noisebridge/%.o: src/cmd/noisebridge/%.c
src/cmd/noisebridge/%.o: src/cmd/noisebridge/%.c src/cmd/noisebridge/%.d
	$(QCC) -c $(NOISEBRIDGE_CFLAGS) -o $@ $<

src/cmd/noisebridge/%.d: src/cmd/noisebridge/%.c
	$(QMM) -MM $(DEPFLAGS) $(NOISEBRIDGE_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

ifneq ($(MAKECMDGOALS),clean)
-include $(patsubst %.o,%.d,$(NOISEBRIDGE_OBJECTS))
endif

install-noisebridge: $(NOISEBRIDGE_TARGET)
	$(QINSTALL) -m0755 $< $(BINDIR)/$(NOISEBRIDGE_TARGET)

clean-noisebridge:
	$(Q)for file in $(NOISEBRIDGE_TARGET) $(NOISEBRIDGE_OBJECTS) $(NOISEBRIDGE_DEPS); do if [ -f "$$file" ]; then $(RM) "$$file"; fi; done

#
# serialdump
#

build-serialdump: $(COMMON_ARCHIVE) $(SERIALDUMP_TARGET)

$(SERIALDUMP_TARGET): $(SERIALDUMP_OBJECTS)
	$(QLD) $(SERIALDUMP_LDFLAGS) -o $@ $^ $(SERIALDUMP_LIBS)

src/cmd/serialdump/%.o: src/cmd/serialdump/%.c
src/cmd/serialdump/%.o: src/cmd/serialdump/%.c src/cmd/serialdump/%.d
	$(QCC) -c $(SERIALDUMP_CFLAGS) -o $@ $<

src/cmd/serialdump/%.d: src/cmd/serialdump/%.c
	$(QMM) -MM $(DEPFLAGS) $(SERIALDUMP_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

ifneq ($(MAKECMDGOALS),clean)
-include $(patsubst %.o,%.d,$(SERIALDUMP_OBJECTS))
endif

install-serialdump: $(SERIALDUMP_TARGET)
	$(QINSTALL) -m0755 $< $(BINDIR)/$(SERIALDUMP_TARGET)

clean-serialdump:
	$(Q)for file in $(SERIALDUMP_TARGET) $(SERIALDUMP_OBJECTS) $(SERIALDUMP_DEPS); do if [ -f "$$file" ]; then $(RM) "$$file"; fi; done

#
# tests
#

test-all: .force $(COMMON_ARCHIVE) $(DMRLIB_TARGET) $(TEST_PROGRAMS) test-run

test/%.test: test/%.o
	$(QLD) $(TEST_LDFLAGS) -o $@ $^ $(TEST_LIBS)

test/%.o: test/%.c
test/%.o: test/%.c test/%.d
	$(QCC) -c $(TEST_CFLAGS) -o $@ $<

test/%.d: test/%.c
	$(QMM) -MM $(DEPFLAGS) $(TEST_CFLAGS) -MT $(patsubst %.d,%.o,$@) -o $@ $<

test-run: .force $(TEST_PROGRAMS)
	@for test in $(TEST_PROGRAMS); do printf "[\033[1;37m TEST \033[0m] %s\n" "$$test"; $$test; done

clean-test:
	$(Q)for file in $(TEST_PROGRAMS) $(TEST_DEPS); do if [ -f "$$file" ]; then $(RM) "$$file"; fi; done

.force:
