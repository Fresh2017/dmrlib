import os
import sys

Import('env')

localenv = env.Clone()
localenv.Append(
    CPPPATH=[
        os.path.join('#src', 'dmr', 'support', 'tinycthread', 'source'),
    ],
    LIBS=[
        env['libdmrfec_name'],
        env['libdmr_name'],
    ],
    LIBPATH=[
        '#build/libdmr',
        '#build/libdmrfec',
    ],
)

if sys.platform in ('linux2', 'darwin'):
    name = 'dmrdump'

    localenv.Append(
        LIBS=['pcap'],
    )

    conf = Configure(localenv)
    if not conf.CheckLibWithHeader('pcap', 'pcap.h', 'c'):
        print('libpcap is required, check config.log')
        Exit(1)
    conf.Finish()

elif sys.platform == 'win32':
    name = 'dmrdump.exe'

    localenv.Append(
        CPPPATH=[
            os.path.join('#support', 'windows', 'wpcap', 'Include'),
        ],
        LIBS=[
            'ws2_32',
            'wpcap',
        ],
        LIBPATH=[
            os.path.join('#support', 'windows', 'wpcap', 'Lib'),
        ]
    )

    #conf = Configure(localenv)
    #if not conf.CheckLibWithHeader('wpcap', 'pcap.h', 'c'):
    #    print('wpcap is required, check config.log')
    #    Exit(1)
    #conf.Finish()


src = [
    'main.c',
]
dmrdump = localenv.Program(name, src)
#env.StaticLibrary(name, src)
Return('dmrdump')
