import os
import sys

from scons_checks import CheckCompileSource

Import('env')

localenv = env.Clone()
localenv.Append(
    LIBS=[
        env['libdmr_name'],
    ],
    LIBPATH=[
        '#build/libdmr',
    ],
)

testcode = {
    'getauxval': '''
#include <stdlib.h>
#include <sys/auxv.h>

int main(int argc, char **argv)
{
    (void)argc;
    (void)argv;
    getauxval(AT_EXECFN);
    return 0;
}
''',
}

if env['ENABLE_PROTO_MBE']:
    localenv.Append(
        LIBS=[
            'mbe',
            'portaudio',
        ],
        LIBPATH=[
            '#build/mbelib',
        ],
    )

required_libs_with_header = ()

if sys.platform == 'linux2':
    name = 'noisebridge'
    localenv.Append(
        LIBS=[
            'pthread',
        ],
    )

    required_libs_with_header += (
        (1, 'dl', 'dlfcn.h', 'c'),
    )

if sys.platform == 'darwin':
    name = 'noisebridge'
    localenv.Append(
        CPPPATH=[
            '#support/darwin/portaudio/include',
        ],
        LIBS=[
            'pthread',
        ],
        LIBPATH=[
            '#support/darwin/portaudio/lib',
        ],
        LINKFLAGS=[
            '-framework', 'CoreServices',
        ],
    )

if sys.platform == 'win32':
    name = 'noisebridge.exe'

if not env.GetOption('clean'):
    conf = Configure(localenv, custom_tests={
        'CheckCompileSource': CheckCompileSource,
    })

    features = []
    for feature, source in testcode.items():
        if conf.CheckCompileSource(feature, source):
            features.append(feature)
    for required, lib, header, compiler in required_libs_with_header:
        if conf.CheckLibWithHeader(lib, header, compiler):
            conf.env._Have(lib, 1)
        elif required:
            print(lib + ' is required')
            Exit(1)
        else:
            conf.env._Have(lib, 0)
        features.append(feature)

    localenv = conf.Finish()
    localenv.Append(
        CPPDEFINES=[
            'HAVE_' + feature.upper() for feature in features
        ]
    )


'''
conf = localenv.Configure()
if not conf.CheckLibWithHeader('portaudio', 'portaudio.h', 'c'):
    print('portaudio is required, apt-get install portaudio19-dev')
    Exit(1)
conf.Finish()
'''

noisebridge = localenv.Program(name, Glob('*.c'))
Return('noisebridge')
