[configure]
stages = c, env
option =
    mingw:
    prefix: /usr/local
with   =
    debug:  no
    mbelib: no

[c:env]
required =
    -D_GNU_SOURCE
    -D_REENTRANT
    -Wall
    -Wextra
    -ffast-math
    -Iinclude
    -Isrc

required_osx =
    -Isupport/osx/include
    -Isupport/osx/lib

required_win32 =
    -Isupport/win32/include
    -Lsupport/win32/lib

required_if_MINGW =
    -I{MINGW}/include
    -I{MINGW}/include/ddk

[c:header]
required =
    ctype.h
    errno.h
    inttypes.h
    signal.h
    stdarg.h
    stdbool.h
    stddef.h
    stdio.h
    stdlib.h
    string.h
    assert.h
    limits.h
    time.h
    sys/param.h

required_linux =
    netdb.h
    pthread.h

required_osx =
    < required_linux

required_win32 =
    windows.h
    winsock2.h

optional =
    arpa/inet.h
    fcntl.h
    libgen.h
    linux/termios.h
    net/ethernet.h
    netinet/ip.h
    netinet/udp.h

[c:library]
required =
    m:      math.h
    talloc: talloc.h

required_linux:
    dl:      dlfcn.h
    pthread: pthread.h
    rt:      time.h

required_osx:
    pthread: pthread.h

required_win32:
    ws2_32: windows.h, winsock2.h
    wpcap:  pcap.h

optional =
    bsd:       bsd/bsd.h
    lua:       lua.h
    lua52:     lua.h
    lua5.2:    lua.h
    lua53:     lua.h
    lua5.3:    lua.h
    magic:     magic.h
    portaudio: portaudio.h
    proc:      libproc.h

[c:define]
optional =
    SO_REUSEADDR: sys/socket.h
    SO_REUSEPORT: sys/socket.h
    BOTHER:       linux/termios.h

[c:type]
required =
    uint8_t:   inttypes.h
    uint16_t:  inttypes.h
    uint32_t:  inttypes.h

optional_posix =
    struct sockaddr_storage: sys/socket.h
    struct sockaddr_in6:     sys/socket.h
    socklen_t:               sys/types.h, sys/socket.h, netinet/in.h

optional_linux =
    < optional_posix

optional_osx =
    < optional_posix

optional_win32 =
    socklen_t: sys/types.h, winsock2.h, ws2tcpip.h

optional_if_HAVE_LINUX_TERMIOS_H =
    struct termios:  linux/termios.h
    struct termios2: linux/termios.h
    struct termiox:  linux/termios.h

[c:member]
optional =
    struct termios.c_ispeed:  linux/termios.h
    struct termios.c_ospeed:  linux/termios.h
    struct termios2.c_ispeed: linux/termios.h
    struct termios2.c_ospeed: linux/termios.h

[c:feature]
optional =
    # Compiler specific
    mingw:                test/have_mingw.c
    inline:               test/have_inline.c
    restrict:             test/have_restrict.c
    binary literals:      test/have_binary_literals.c
    visibility attribute: test/have_visibility_attribute.c
    visibility declspec:  test/have_visibility_declspec.c
    # Libc
    libc ipv6:            test/have_libc_ipv6.c
    libc scope_id:        test/have_libc_scope_id.c
    # Functions
    if_indextoname:       test/have_if_indextoname.c
    getline:              test/have_getline.c
    setsockopt:           test/have_setsockopt.c
    strtok_r:             test/have_strtok_r.c
    # Types
    SIGPIPE: 	          test/have_sigpipe.c
    # Multiplexing
    epoll:                test/have_epoll.c
    /dev/epoll:           test/have_dev_epoll.c
    kqueue:               test/have_kqueue.c
    poll:                 test/have_poll.c
    select:               test/have_select.c

[env:binary]
optional_linux =
    pcap-config
    pkg-config: --version

optional_osx =
    < optional_linux

[env:flags]
optional_if_HAVE_PKG_CONFIG =
    pkg-config lua:    pkg-config --cflags lua, pkg-config --libs lua
    pkg-config lua5.2: pkg-config --cflags lua5.2, pkg-config --libs lua5.2
    pkg-config lua5.3: pkg-config --cflags lua5.3, pkg-config --libs lua5.3
    pkg-config talloc: pkg-config --cflags talloc, pkg-config --libs talloc
    pkg-config pcap:   pkg-config --cflags pcap, pkg-config --libs pcap

optional_if_HAVE_PCAP_CONFIG =
    pcap-config:       pcap-config --cflags, pcap-config --libs

optional_osx:
    < optional_linux

[env:versions]
source = versions
git    = yes

[env:generate]
source = {target}.in
target =
    include/dmr/config.h
    include/dmr/version.h
    src/cmd/noisebridge/version.h
    src/common/config.h
    Makefile
    dmrlib.pc
